generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                 String               @id @default(cuid())
  username           String               @unique
  email              String               @unique
  emailVerified      DateTime?            
  passwordHash       String
  sessions           Session[]
  PasswordResetToken PasswordResetToken[]
  EmailVerificationToken  EmailVerificationToken[]
  accounts           Account[]
  tickets            Ticket[]
  memberships        Membership[]
  invitesByUser      Invitation[]

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt 
  lastSignedIn       DateTime?

  role               Role                 @default(USER)

  comments           Comment[]

  @@index([createdAt])
}

model Organization {
    id                String      @id @default(cuid())
    createdAt         DateTime    @default(now())
    updatedAt         DateTime    @updatedAt
    name              String      
    memberships       Membership[]    
    tickets           Ticket[]
    invitations       Invitation[]
}

model Invitation {
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt   
  organization      Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId    String
  email             String
  tokenHash         String        @unique
  invitedByUser     User?         @relation(fields: [invitedByUserId], references: [id], onDelete: SetNull)
  invitedByUserId   String?

  @@index([organizationId]) 
}

model Membership {
    organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId  String
    user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId          String
    isActive        Boolean
    membershipRole  MembershipRole  @default(MEMBER)

    canDeleteTicket Boolean @default(true)
    canUpdateTicket Boolean @default(true)

    joinedAt DateTime @default(now())

    @@id(name: "membershipId", [organizationId, userId])
    @@index([organizationId])
    @@index([userId])
}

enum MembershipRole {
  MEMBER
  ADMIN
}

model EmailVerificationToken {
  id          String    @id             @default(cuid())
  code        String
  expiresAt   DateTime
  email       String
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
model PasswordResetToken {
  tokenHash   String    @id
  expiresAt   DateTime
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Ticket {
    id          String          @id @default(cuid())
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt
    title       String
    content     String          @db.VarChar(1024)
    status      TicketStatus    @default(OPEN)
    deadline    String          
    bounty      Int             
    userId      String
    user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId  String

    @@index([userId])
    @@index([organizationId])
    comments Comment[]
}

model Comment {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  content     String      @db.VarChar(1024)
  ticketId    String
  ticket      Ticket      @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  userId      String?
  user        User?        @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([ticketId])
}


enum TicketStatus {
    OPEN
    IN_PROGRESS
    DONE
}